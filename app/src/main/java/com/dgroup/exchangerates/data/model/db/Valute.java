package com.dgroup.exchangerates.data.model.db;

import android.os.Parcel;
import android.os.Parcelable;

import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;

import com.dgroup.exchangerates.data.model.WValute;
import com.dgroup.exchangerates.data.model.db.DaoSession;
import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.ToOne;
import org.greenrobot.greendao.annotation.Transient;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.lang.Object;
// KEEP INCLUDES END
/**
 * Entity mapped to table "VALUTE".
 */
@Entity(active = true)
public class Valute implements Parcelable {

    @Id
    private Long numCode;
    private String id;
    private String charCode;
    private String nominal;
    private String name;
    private Double value;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    /** Used for active entity operations. */
    @Generated(hash = 667492497)
    private transient ValuteDao myDao;
    @ToOne(joinProperty = "numCode")
    private ValutePosition position;

    @Generated(hash = 212624812)
    private transient Long position__resolvedKey;
    // KEEP FIELDS - put your custom fields here
    @Transient
    private int intNominal;
    // KEEP FIELDS END

    @Generated(hash = 291676786)
    public Valute() {
    }

    public Valute(Long numCode) {
        this.numCode = numCode;
    }

    @Generated(hash = 1077691006)
    public Valute(Long numCode, String id, String charCode, String nominal, String name, Double value) {
        this.numCode = numCode;
        this.id = id;
        this.charCode = charCode;
        this.nominal = nominal;
        this.name = name;
        this.value = value;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1620473052)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getValuteDao() : null;
    }

    public Long getNumCode() {
        return numCode;
    }

    public void setNumCode(Long numCode) {
        this.numCode = numCode;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getCharCode() {
        return charCode;
    }

    public void setCharCode(String charCode) {
        this.charCode = charCode;
    }

    public String getNominal() {
        return nominal;
    }

    public void setNominal(String nominal) {
        this.nominal = nominal;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Double getValue() {
        return value;
    }

    public void setValue(Double value) {
        this.value = value;
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 1050383747)
    public ValutePosition getPosition() {
        Long __key = this.numCode;
        if (position__resolvedKey == null || !position__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ValutePositionDao targetDao = daoSession.getValutePositionDao();
            ValutePosition positionNew = targetDao.load(__key);
            synchronized (this) {
                position = positionNew;
                position__resolvedKey = __key;
            }
        }
        return position;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1664257191)
    public void setPosition(ValutePosition position) {
        synchronized (this) {
            this.position = position;
            numCode = position == null ? null : position.getId();
            position__resolvedKey = numCode;
        }
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public Valute(WValute wValute) {
        this.name = wValute.name;
        this.value = Double.parseDouble(wValute.value.replace(',','.'));
        this.id = wValute.id;
        this.nominal = wValute.nominal;
        this.numCode = wValute.numCode;
        this.charCode = wValute.charCode;
    }

    @Override
    public int hashCode() {
        return charCode.hashCode();
    }

    public int getIntNominal() {
        if(intNominal==0){
            intNominal = Integer.parseInt(nominal);
        }
        return intNominal;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null)
            return false;
        if (this == obj)
            return true;
        if (getClass() != obj.getClass())
            return false;
        Valute other = (Valute) obj;
        return charCode.equals(other.charCode);
    }

    protected Valute(Parcel in) {
        numCode = in.readByte() == 0x00 ? null : in.readLong();
        id = in.readString();
        charCode = in.readString();
        nominal = in.readString();
        name = in.readString();
        value = in.readByte() == 0x00 ? null : in.readDouble();
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        if (numCode == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeLong(numCode);
        }
        dest.writeString(id);
        dest.writeString(charCode);
        dest.writeString(nominal);
        dest.writeString(name);
        if (value == null) {
            dest.writeByte((byte) (0x00));
        } else {
            dest.writeByte((byte) (0x01));
            dest.writeDouble(value);
        }
    }

    @SuppressWarnings("unused")
    public static final Parcelable.Creator<Valute> CREATOR = new Parcelable.Creator<Valute>() {
        @Override
        public Valute createFromParcel(Parcel in) {
            return new Valute(in);
        }

        @Override
        public Valute[] newArray(int size) {
            return new Valute[size];
        }
    };
    // KEEP METHODS END

}
